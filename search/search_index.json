{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"about/","text":"HN\u5c0f\u516d\u83dc\u9e21OIer\uff0c\u76ee\u524d\u53ea\u6709\u4e00\u4e2aPJ1=\uff0c\u849f\u84bb\u5728\u5899\u89d2\u745f\u745f\u53d1\u6296\u3002","title":"About"},{"location":"notes/hash/","text":"\u54c8\u5e0c(HASH) \u00b6 \u54c8\u5e0c(HASH)\u672c\u8d28\u4e0a\u662f\u4e00\u79cd\u6620\u5c04\u3002 \u5f15\u51651 \u00b6 \u7ed9\u5b9a \\(n\\) \u4e2a\u6b63\u6574\u6570\uff0c\u8fd9\u4e9b\u6b63\u6574\u6570\u7684\u503c\u57df\u5747\u4e3a \\([1,10^6)\\) \uff0c\u8ba9\u4f60\u628a\u8fd9\u4e9b\u6570\u53bb\u91cd\u540e\u6309\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u540e\u8f93\u51fa\u3002 \u65b9\u6cd5 \u00b6 \u7528\u4e00\u4e2a\u6876\u6765\u7edf\u8ba1\u6bcf\u4e00\u4e2a\u6570\u7684\u6b21\u6570\uff0c\u6700\u540e\u5faa\u73af\u503c\u57df\uff0c\u5982\u679c\u6b21\u6570\u4e0d\u4e3a \\(0\\) \uff0c\u5c31\u8f93\u51fa\u5373\u53ef\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a \\(O(n)\\) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a \\(O(10^6)\\) \u3002 \u5f15\u51652 \u00b6 \u7ed9\u5b9a \\(n\\) \u4e2a\u6b63\u6574\u6570\uff0c\u8fd9\u4e9b\u6b63\u6574\u6570\u7684\u503c\u57df\u5747\u4e3a \\([1,10^9)\\) \uff0c\u8ba9\u4f60\u628a\u8fd9\u4e9b\u6570\u53bb\u91cd\u540e\u6309\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u540e\u8f93\u51fa\u3002 \u8fd9\u9898\u53d1\u73b0\u503c\u57df\u5230\u4e86 \\(10^9\\) \uff0c\u5f88\u660e\u663e\u65e0\u6cd5\u7528\u6876\u6392\u6765\u505a\u3002 \u65b9\u6cd51 \u00b6 \u7528STL-unique\u6765\u5199\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5927\u6982\u4e3a \\(O(n)\\) \uff0c\u53ef\u4ee5\u8fc7\u3002 \u4e0d\u8fc7\u5927\u90e8\u5206\u9898\u76ee\u90fd\u65e0\u6cd5\u7528unique\uff0c\u5c31\u6709\u4e86\u65b0\u7684\u7b97\u6cd5-\u54c8\u5e0c\u3002 \u65b9\u6cd52-\u54c8\u5e0c\u7b97\u6cd5 \u00b6 \u6211\u4eec\u7528\u4e00\u4e2a\u51fd\u6570 \\(H\\) \uff0c\u5c06\u4e00\u4e2a\u5f88\u5927\u7684\u6570 \\(x\\) \u53d8\u4e3a\u4e00\u4e2a\u53ef\u4ee5\u7528\u6570\u7ec4\u5b58\u4e0b\u7684\u6570\u3002 \u4e00\u822c\u90fd\u5c06\u54c8\u5e0c\u51fd\u6570 \\(H(x)\\) \u5b9a\u4e49\u4e3a \\(x\\bmod P\\) \uff08 \\(P\\) \u4e3a\u4e00\u4e2a\u8d28\u6570\uff09\u3002 \u6700\u540e\u5c06\u54c8\u5e0c\u4e4b\u540e\u7684\u6570\u505a\u6876\u6392\u5373\u53ef\u3002 \u54c8\u5e0c\u51b2\u7a81 \u00b6 \u6211\u4eec\u53d1\u73b0\u5982\u679c\u4e24\u4e2a\u6570 \\(x,y\\) \u4f7f \\(H(x)=H(y)\\) \uff0c\u6b64\u65f6\u53d1\u73b0\u54c8\u5e0c\u4e4b\u540e\u51b2\u7a81\u4e86\uff0c\u7b54\u6848\u5c31\u9519\u8bef\u3002\u6b64\u65f6\u5c31\u53eb \u54c8\u5e0c\u51b2\u7a81 \u3002 \u89e3\u51b3\u54c8\u5e0c\u51b2\u7a81 \u00b6 \u6211\u4eec\u7528\u4e00\u4e2a\u94fe\u8868\u5904\u7406 \\(0\\sim P-1\\) \u7684\u6a21\u6570\u60c5\u51b5\u3002\u5373\uff0c\u5c06 \\(x\\) \u63d2\u5165\u5230 \\(H(x)\\) \u7684\u94fe\u8868\u4e0b\u3002 \u6bcf\u6b21\u63d2\u5165\u65f6\u904d\u5386 \\(H(x)\\) \u7684\u94fe\u8868\uff0c\u5982\u679c\u6ca1\u6709\u91cd\u590d\u5c31\u63d2\u5165\uff0c\u5426\u5219\u5c31\u4e0d\u63d2\u5165\u94fe\u8868\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 \\(O(n\\cdot len) \\approx O(n\\cdot \\dfrac{n}{P})\\) \\(\\text{\u5f53}P\\approx n\\text{\u65f6\uff0c}O(n\\cdot \\dfrac{n}{P})\\approx O(n)\\) \u3002 \u6b64\u65f6\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u5341\u5206\u4f18\u79c0\u4e86\u3002 \u6a21\u677f\u4ee3\u7801 #include <bits/stdc++.h> using namespace std ; const int MOD = 999983 ; int n , x , ans ; vector < int > G [ MOD + 5 ]; int Hash ( int x ) { return x % MOD ; } int insert ( int x ) { int val = Hash ( x ); for ( int i = 0 ; i < G [ val ]. size (); ++ i ) { if ( G [ val ][ i ] == x ) return 0 ; } G [ val ]. push_back ( x ); return 1 ; } int main () { cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) { cin >> x ; ans += insert ( x ); } cout << ans << endl ; return 0 ; } \u4f8b\u9898 \u00b6 P4305 [JLOI2011]\u4e0d\u91cd\u590d\u6570\u5b57 \u8fd9\u9898\u5b9a\u4e49\u54c8\u5e0c\u51fd\u6570 \\(H(x)=x\\bmod P\\) \uff0c\u5982\u679c\u8fc7\u4e0d\u4e86\uff0c\u522b\u5fd8\u4e86\u8003\u8651\u8d1f\u6570\u7684\u60c5\u51b5\u3002 [JLOI2011]\u4e0d\u91cd\u590d\u6570\u5b57 \u53c2\u8003\u4ee3\u7801 #include <bits/stdc++.h> using namespace std ; const int N = 5e4 + 5 ; const int MOD = 999983 ; int T , n , ans ; int a [ N ]; vector < int > G [ MOD + 5 ]; int Hash ( int x ) { return ( x % MOD + MOD ) % MOD ; } int insert ( int x ) { int val = Hash ( x ); for ( int i = 0 ; i < G [ val ]. size (); ++ i ) { if ( G [ val ][ i ] == x ) return 0 ; } G [ val ]. push_back ( x ); return 1 ; } int main () { cin >> T ; while ( T -- ) { cin >> n ; ans = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d\" , & a [ i ]); } for ( int i = 0 ; i < MOD ; ++ i ) { G [ i ]. clear (); } for ( int i = 1 ; i <= n ; ++ i ) { if ( insert ( a [ i ]) == 1 ) { cout << a [ i ] << \" \" ; } } cout << endl ; } return 0 ; } P1955 [NOI2015]\u7a0b\u5e8f\u81ea\u52a8\u5206\u6790 \u9996\u5148\u5148\u770b\u9898\u76ee\uff0c\u770b\u5230\u6709 \\(x_i=x_j\\) \u65f6\uff0c\u5c31\u60f3\u5230\u4e86\u7528\u56fe\u8bba\u7684\u5e76\u67e5\u96c6\u6765\u505a\u3002\u5373\uff0c\u5148\u5c06\u6240\u6709 \\(e=1\\) \u7684\u60c5\u51b5\u4e2d\u7684 \\((i,j)\\) \u5408\u5e76\uff0c\u6700\u540e\u5408\u5e76\u5b8c\u518d\u679a\u4e3e \\(e=0\\) \u7684\u60c5\u51b5\u770b\u662f\u5426\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u5c31\u884c\u4e86\u3002 \u53ef\u53d1\u73b0\u6570\u636e\u8303\u56f4\u4e2d\u7684 \\(1\\leq i,j\\leq 10^9\\) \u5c31\u77e5\u9053\u7528\u7eaf\u7684\u5e76\u67e5\u96c6\u8fc7\u4e0d\u53bb\u3002\u4e8e\u662f\u60f3\u5230\u4e86\u7528\u54c8\u5e0c\u5c06\u6570\u7684\u8303\u56f4\u7f29\u5c0f\uff0c\u968f\u540e\u5e76\u67e5\u96c6\u7ef4\u62a4\u5373\u53ef\u3002\u54c8\u5e0c\u51fd\u6570\u4e00\u6837\u662f \\(H(x) = x\\bmod P\\) \u3002\u65f6\u95f4\u590d\u6742\u5ea6\uff1a \\(O(n\\cdot\\alpha(P))\\approx O(n)\\) [NOI2015]\u7a0b\u5e8f\u81ea\u52a8\u5206\u6790 \u53c2\u8003\u4ee3\u7801 #include <bits/stdc++.h> using namespace std ; const int N = 1e5 + 5 ; const int MOD = 990887 ; int T , n ; int x [ N ], y [ N ], opt [ N ]; int fa [ MOD + 5 ]; int Hash ( int x ) { return x % MOD ; } int find ( int x ) { if ( x == fa [ x ]) return x ; else return fa [ x ] = find ( fa [ x ]); } void unionn ( int x , int y ) { int fx = find ( x ), fy = find ( y ); if ( fx != fy ) fa [ fx ] = fy ; return ; } int main () { cin >> T ; while ( T -- ) { cin >> n ; for ( int i = 0 ; i < MOD ; ++ i ) { fa [ i ] = i ; } for ( int i = 1 ; i <= n ; ++ i ) { cin >> x [ i ] >> y [ i ] >> opt [ i ]; if ( opt [ i ] == 1 ) unionn ( Hash ( x [ i ]), Hash ( y [ i ])); } bool flag = false ; for ( int i = 1 ; i <= n ; ++ i ) { if ( opt [ i ] == 0 ) { if ( find ( Hash ( x [ i ])) == find ( Hash ( y [ i ]))){ puts ( \"NO\" ); flag = true ; break ; } } } if ( flag == false ) puts ( \"YES\" ); } return 0 ; } SP4354 TWINSNOW - Snowflakes \u6837\u4f8b\u8f93\u5165(POJ)\uff1a 2 1 2 3 4 5 6 4 3 2 1 6 5 \u6837\u4f8b\u8f93\u51fa(POJ)\uff1a Twin snowflakes found. \u9996\u5148\u770b\u5230\u8fd9\u9898\uff0c\u53d1\u73b0\u6bcf\u4e2a\u96ea\u82b1\u662f\u4e00\u4e2a\u542b\u6709\u516d\u4e2a\u6570\u7684\u5e8f\u5217\uff0c\u6211\u4eec\u5c31\u5b9a\u4e49\u8fd9\u4e2a\u5e8f\u5217\u7684\u54c8\u5e0c\u503c\u4e3a\u8fd9\u4e9b\u6570\u7684\u548c \\(\\bmod P\\) \u7684\u503c\uff0c\u5373\uff1a \\[ H(a)=\\sum_{i=1}^{6}{a_i} \\] \uff08\u5f53\u7136\u4e5f\u53ef\u4ee5\u662f\u522b\u7684\uff0c\u6bd4\u5982\u8fd9\u4e2a\u5e8f\u5217\u7684\u548c\u52a0\u8fd9\u4e2a\u5e8f\u5217\u7684\u4e58\u79ef \\(\\bmod P\\) \u7684\u503c\uff0c\u53ea\u8981\u4e0e\u8fd9\u4e2a\u5e8f\u5217\u7684\u987a\u5e8f\u65e0\u5173\u5373\u53ef\uff09 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5224\u65ad\u4e24\u4e2a\u96ea\u82b1\u662f\u5426\u76f8\u540c\u65f6\uff0c\u4ece\u67d0\u4e2a\u8282\u70b9\uff0c\u987a\u65f6\u9488\u548c\u9006\u65f6\u9488\u90fd\u8981\u6bd4\u8f83\u624d\u884c\u3002 TWINSNOW - Snowflakes \u53c2\u8003\u4ee3\u7801 #include <iostream> #include <cstdio> #include <vector> #define int long long using namespace std ; const int N = 1e5 + 5 ; const int MOD = 99991 ; int n ; int a [ N ][ 20 ]; vector < int > G [ MOD + 5 ]; int Hash ( int ind ) { int sum = 0 ; for ( int i = 1 ; i <= 6 ; ++ i ) { sum = ( sum + a [ ind ][ i ]) % MOD ; } return sum % MOD ; } bool issame ( int ind1 , int ind2 ) { for ( int i = 1 ; i <= 6 ; ++ i ) { for ( int j = 1 ; j <= 6 ; ++ j ) { bool flag = true ; for ( int k = 0 ; k < 6 ; ++ k ) { if ( a [ ind1 ][( i + k ) % 6 + 1 ] != a [ ind2 ][( j + k ) % 6 + 1 ]) flag = false ; } if ( flag == true ) return true ; flag = true ; for ( int k = 0 ; k < 6 ; ++ k ) { if ( a [ ind1 ][( i + k ) % 6 + 1 ] != a [ ind2 ][( j - k + 6 ) % 6 + 1 ]) flag = false ; } if ( flag == true ) return true ; } } return false ; } int insert ( int ind ) { int val = Hash ( ind ); for ( int i = 0 ; i < G [ val ]. size (); ++ i ) { if ( issame ( G [ val ][ i ], ind )) return 1 ; } G [ val ]. push_back ( ind ); return 0 ; } int ans = 0 ; signed main () { cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= 6 ; ++ j ) { scanf ( \"%lld\" , & a [ i ][ j ]); } if ( insert ( i ) == 1 ) { puts ( \"Twin snowflakes found.\" ); return 0 ; } } puts ( \"No two snowflakes are alike.\" ); return 0 ; }","title":"\u54c8\u5e0c"},{"location":"notes/hash/#hash","text":"\u54c8\u5e0c(HASH)\u672c\u8d28\u4e0a\u662f\u4e00\u79cd\u6620\u5c04\u3002","title":"\u54c8\u5e0c(HASH)"},{"location":"notes/hash/#1","text":"\u7ed9\u5b9a \\(n\\) \u4e2a\u6b63\u6574\u6570\uff0c\u8fd9\u4e9b\u6b63\u6574\u6570\u7684\u503c\u57df\u5747\u4e3a \\([1,10^6)\\) \uff0c\u8ba9\u4f60\u628a\u8fd9\u4e9b\u6570\u53bb\u91cd\u540e\u6309\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u540e\u8f93\u51fa\u3002","title":"\u5f15\u51651"},{"location":"notes/hash/#_1","text":"\u7528\u4e00\u4e2a\u6876\u6765\u7edf\u8ba1\u6bcf\u4e00\u4e2a\u6570\u7684\u6b21\u6570\uff0c\u6700\u540e\u5faa\u73af\u503c\u57df\uff0c\u5982\u679c\u6b21\u6570\u4e0d\u4e3a \\(0\\) \uff0c\u5c31\u8f93\u51fa\u5373\u53ef\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a \\(O(n)\\) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a \\(O(10^6)\\) \u3002","title":"\u65b9\u6cd5"},{"location":"notes/hash/#2","text":"\u7ed9\u5b9a \\(n\\) \u4e2a\u6b63\u6574\u6570\uff0c\u8fd9\u4e9b\u6b63\u6574\u6570\u7684\u503c\u57df\u5747\u4e3a \\([1,10^9)\\) \uff0c\u8ba9\u4f60\u628a\u8fd9\u4e9b\u6570\u53bb\u91cd\u540e\u6309\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u540e\u8f93\u51fa\u3002 \u8fd9\u9898\u53d1\u73b0\u503c\u57df\u5230\u4e86 \\(10^9\\) \uff0c\u5f88\u660e\u663e\u65e0\u6cd5\u7528\u6876\u6392\u6765\u505a\u3002","title":"\u5f15\u51652"},{"location":"notes/hash/#1_1","text":"\u7528STL-unique\u6765\u5199\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5927\u6982\u4e3a \\(O(n)\\) \uff0c\u53ef\u4ee5\u8fc7\u3002 \u4e0d\u8fc7\u5927\u90e8\u5206\u9898\u76ee\u90fd\u65e0\u6cd5\u7528unique\uff0c\u5c31\u6709\u4e86\u65b0\u7684\u7b97\u6cd5-\u54c8\u5e0c\u3002","title":"\u65b9\u6cd51"},{"location":"notes/hash/#2-","text":"\u6211\u4eec\u7528\u4e00\u4e2a\u51fd\u6570 \\(H\\) \uff0c\u5c06\u4e00\u4e2a\u5f88\u5927\u7684\u6570 \\(x\\) \u53d8\u4e3a\u4e00\u4e2a\u53ef\u4ee5\u7528\u6570\u7ec4\u5b58\u4e0b\u7684\u6570\u3002 \u4e00\u822c\u90fd\u5c06\u54c8\u5e0c\u51fd\u6570 \\(H(x)\\) \u5b9a\u4e49\u4e3a \\(x\\bmod P\\) \uff08 \\(P\\) \u4e3a\u4e00\u4e2a\u8d28\u6570\uff09\u3002 \u6700\u540e\u5c06\u54c8\u5e0c\u4e4b\u540e\u7684\u6570\u505a\u6876\u6392\u5373\u53ef\u3002","title":"\u65b9\u6cd52-\u54c8\u5e0c\u7b97\u6cd5"},{"location":"notes/hash/#_2","text":"\u6211\u4eec\u53d1\u73b0\u5982\u679c\u4e24\u4e2a\u6570 \\(x,y\\) \u4f7f \\(H(x)=H(y)\\) \uff0c\u6b64\u65f6\u53d1\u73b0\u54c8\u5e0c\u4e4b\u540e\u51b2\u7a81\u4e86\uff0c\u7b54\u6848\u5c31\u9519\u8bef\u3002\u6b64\u65f6\u5c31\u53eb \u54c8\u5e0c\u51b2\u7a81 \u3002","title":"\u54c8\u5e0c\u51b2\u7a81"},{"location":"notes/hash/#_3","text":"\u6211\u4eec\u7528\u4e00\u4e2a\u94fe\u8868\u5904\u7406 \\(0\\sim P-1\\) \u7684\u6a21\u6570\u60c5\u51b5\u3002\u5373\uff0c\u5c06 \\(x\\) \u63d2\u5165\u5230 \\(H(x)\\) \u7684\u94fe\u8868\u4e0b\u3002 \u6bcf\u6b21\u63d2\u5165\u65f6\u904d\u5386 \\(H(x)\\) \u7684\u94fe\u8868\uff0c\u5982\u679c\u6ca1\u6709\u91cd\u590d\u5c31\u63d2\u5165\uff0c\u5426\u5219\u5c31\u4e0d\u63d2\u5165\u94fe\u8868\u3002","title":"\u89e3\u51b3\u54c8\u5e0c\u51b2\u7a81"},{"location":"notes/hash/#_4","text":"\\(O(n\\cdot len) \\approx O(n\\cdot \\dfrac{n}{P})\\) \\(\\text{\u5f53}P\\approx n\\text{\u65f6\uff0c}O(n\\cdot \\dfrac{n}{P})\\approx O(n)\\) \u3002 \u6b64\u65f6\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u5341\u5206\u4f18\u79c0\u4e86\u3002 \u6a21\u677f\u4ee3\u7801 #include <bits/stdc++.h> using namespace std ; const int MOD = 999983 ; int n , x , ans ; vector < int > G [ MOD + 5 ]; int Hash ( int x ) { return x % MOD ; } int insert ( int x ) { int val = Hash ( x ); for ( int i = 0 ; i < G [ val ]. size (); ++ i ) { if ( G [ val ][ i ] == x ) return 0 ; } G [ val ]. push_back ( x ); return 1 ; } int main () { cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) { cin >> x ; ans += insert ( x ); } cout << ans << endl ; return 0 ; }","title":"\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"notes/hash/#_5","text":"P4305 [JLOI2011]\u4e0d\u91cd\u590d\u6570\u5b57 \u8fd9\u9898\u5b9a\u4e49\u54c8\u5e0c\u51fd\u6570 \\(H(x)=x\\bmod P\\) \uff0c\u5982\u679c\u8fc7\u4e0d\u4e86\uff0c\u522b\u5fd8\u4e86\u8003\u8651\u8d1f\u6570\u7684\u60c5\u51b5\u3002 [JLOI2011]\u4e0d\u91cd\u590d\u6570\u5b57 \u53c2\u8003\u4ee3\u7801 #include <bits/stdc++.h> using namespace std ; const int N = 5e4 + 5 ; const int MOD = 999983 ; int T , n , ans ; int a [ N ]; vector < int > G [ MOD + 5 ]; int Hash ( int x ) { return ( x % MOD + MOD ) % MOD ; } int insert ( int x ) { int val = Hash ( x ); for ( int i = 0 ; i < G [ val ]. size (); ++ i ) { if ( G [ val ][ i ] == x ) return 0 ; } G [ val ]. push_back ( x ); return 1 ; } int main () { cin >> T ; while ( T -- ) { cin >> n ; ans = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d\" , & a [ i ]); } for ( int i = 0 ; i < MOD ; ++ i ) { G [ i ]. clear (); } for ( int i = 1 ; i <= n ; ++ i ) { if ( insert ( a [ i ]) == 1 ) { cout << a [ i ] << \" \" ; } } cout << endl ; } return 0 ; } P1955 [NOI2015]\u7a0b\u5e8f\u81ea\u52a8\u5206\u6790 \u9996\u5148\u5148\u770b\u9898\u76ee\uff0c\u770b\u5230\u6709 \\(x_i=x_j\\) \u65f6\uff0c\u5c31\u60f3\u5230\u4e86\u7528\u56fe\u8bba\u7684\u5e76\u67e5\u96c6\u6765\u505a\u3002\u5373\uff0c\u5148\u5c06\u6240\u6709 \\(e=1\\) \u7684\u60c5\u51b5\u4e2d\u7684 \\((i,j)\\) \u5408\u5e76\uff0c\u6700\u540e\u5408\u5e76\u5b8c\u518d\u679a\u4e3e \\(e=0\\) \u7684\u60c5\u51b5\u770b\u662f\u5426\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u5c31\u884c\u4e86\u3002 \u53ef\u53d1\u73b0\u6570\u636e\u8303\u56f4\u4e2d\u7684 \\(1\\leq i,j\\leq 10^9\\) \u5c31\u77e5\u9053\u7528\u7eaf\u7684\u5e76\u67e5\u96c6\u8fc7\u4e0d\u53bb\u3002\u4e8e\u662f\u60f3\u5230\u4e86\u7528\u54c8\u5e0c\u5c06\u6570\u7684\u8303\u56f4\u7f29\u5c0f\uff0c\u968f\u540e\u5e76\u67e5\u96c6\u7ef4\u62a4\u5373\u53ef\u3002\u54c8\u5e0c\u51fd\u6570\u4e00\u6837\u662f \\(H(x) = x\\bmod P\\) \u3002\u65f6\u95f4\u590d\u6742\u5ea6\uff1a \\(O(n\\cdot\\alpha(P))\\approx O(n)\\) [NOI2015]\u7a0b\u5e8f\u81ea\u52a8\u5206\u6790 \u53c2\u8003\u4ee3\u7801 #include <bits/stdc++.h> using namespace std ; const int N = 1e5 + 5 ; const int MOD = 990887 ; int T , n ; int x [ N ], y [ N ], opt [ N ]; int fa [ MOD + 5 ]; int Hash ( int x ) { return x % MOD ; } int find ( int x ) { if ( x == fa [ x ]) return x ; else return fa [ x ] = find ( fa [ x ]); } void unionn ( int x , int y ) { int fx = find ( x ), fy = find ( y ); if ( fx != fy ) fa [ fx ] = fy ; return ; } int main () { cin >> T ; while ( T -- ) { cin >> n ; for ( int i = 0 ; i < MOD ; ++ i ) { fa [ i ] = i ; } for ( int i = 1 ; i <= n ; ++ i ) { cin >> x [ i ] >> y [ i ] >> opt [ i ]; if ( opt [ i ] == 1 ) unionn ( Hash ( x [ i ]), Hash ( y [ i ])); } bool flag = false ; for ( int i = 1 ; i <= n ; ++ i ) { if ( opt [ i ] == 0 ) { if ( find ( Hash ( x [ i ])) == find ( Hash ( y [ i ]))){ puts ( \"NO\" ); flag = true ; break ; } } } if ( flag == false ) puts ( \"YES\" ); } return 0 ; } SP4354 TWINSNOW - Snowflakes \u6837\u4f8b\u8f93\u5165(POJ)\uff1a 2 1 2 3 4 5 6 4 3 2 1 6 5 \u6837\u4f8b\u8f93\u51fa(POJ)\uff1a Twin snowflakes found. \u9996\u5148\u770b\u5230\u8fd9\u9898\uff0c\u53d1\u73b0\u6bcf\u4e2a\u96ea\u82b1\u662f\u4e00\u4e2a\u542b\u6709\u516d\u4e2a\u6570\u7684\u5e8f\u5217\uff0c\u6211\u4eec\u5c31\u5b9a\u4e49\u8fd9\u4e2a\u5e8f\u5217\u7684\u54c8\u5e0c\u503c\u4e3a\u8fd9\u4e9b\u6570\u7684\u548c \\(\\bmod P\\) \u7684\u503c\uff0c\u5373\uff1a \\[ H(a)=\\sum_{i=1}^{6}{a_i} \\] \uff08\u5f53\u7136\u4e5f\u53ef\u4ee5\u662f\u522b\u7684\uff0c\u6bd4\u5982\u8fd9\u4e2a\u5e8f\u5217\u7684\u548c\u52a0\u8fd9\u4e2a\u5e8f\u5217\u7684\u4e58\u79ef \\(\\bmod P\\) \u7684\u503c\uff0c\u53ea\u8981\u4e0e\u8fd9\u4e2a\u5e8f\u5217\u7684\u987a\u5e8f\u65e0\u5173\u5373\u53ef\uff09 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5224\u65ad\u4e24\u4e2a\u96ea\u82b1\u662f\u5426\u76f8\u540c\u65f6\uff0c\u4ece\u67d0\u4e2a\u8282\u70b9\uff0c\u987a\u65f6\u9488\u548c\u9006\u65f6\u9488\u90fd\u8981\u6bd4\u8f83\u624d\u884c\u3002 TWINSNOW - Snowflakes \u53c2\u8003\u4ee3\u7801 #include <iostream> #include <cstdio> #include <vector> #define int long long using namespace std ; const int N = 1e5 + 5 ; const int MOD = 99991 ; int n ; int a [ N ][ 20 ]; vector < int > G [ MOD + 5 ]; int Hash ( int ind ) { int sum = 0 ; for ( int i = 1 ; i <= 6 ; ++ i ) { sum = ( sum + a [ ind ][ i ]) % MOD ; } return sum % MOD ; } bool issame ( int ind1 , int ind2 ) { for ( int i = 1 ; i <= 6 ; ++ i ) { for ( int j = 1 ; j <= 6 ; ++ j ) { bool flag = true ; for ( int k = 0 ; k < 6 ; ++ k ) { if ( a [ ind1 ][( i + k ) % 6 + 1 ] != a [ ind2 ][( j + k ) % 6 + 1 ]) flag = false ; } if ( flag == true ) return true ; flag = true ; for ( int k = 0 ; k < 6 ; ++ k ) { if ( a [ ind1 ][( i + k ) % 6 + 1 ] != a [ ind2 ][( j - k + 6 ) % 6 + 1 ]) flag = false ; } if ( flag == true ) return true ; } } return false ; } int insert ( int ind ) { int val = Hash ( ind ); for ( int i = 0 ; i < G [ val ]. size (); ++ i ) { if ( issame ( G [ val ][ i ], ind )) return 1 ; } G [ val ]. push_back ( ind ); return 0 ; } int ans = 0 ; signed main () { cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= 6 ; ++ j ) { scanf ( \"%lld\" , & a [ i ][ j ]); } if ( insert ( i ) == 1 ) { puts ( \"Twin snowflakes found.\" ); return 0 ; } } puts ( \"No two snowflakes are alike.\" ); return 0 ; }","title":"\u4f8b\u9898"},{"location":"notes/trie/","text":"Trie\u6811 \u00b6 Trie\u6811\uff08\u5b57\u5178\u6811\uff09\uff0c\u662f\u4e00\u79cd\u67e5\u8be2\u5feb\u901f\uff0c\u7701\u7a7a\u95f4\uff08\u76f8\u5bf9\u800c\u8a00\uff09\u7684\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u3002 \u5f15\u5165 \u00b6 \u4e0a \u767e\u5ea6 \u641c\u4e1c\u897f\uff0c\u6211\u4eec\u53d1\u73b0\u641c\u7d22\u201c\u6d1b\u8c37\u201d\u4f1a\u51fa\u73b0\u4e8c\u5341\u591a\u9875\u7684\u7ed3\u679c\u3002\u6211\u4eec\u77e5\u9053\uff0c\u767e\u5ea6\u662f\u4e00\u4e2a\u5341\u5206\u5f3a\u5927\u7684\u641c\u7d22\u5f15\u64ce\uff0c\u800c\u4e14\u4fe1\u606f\u91cf\u5de8\u5927\uff0c\u4f46\u6211\u4eec\u641c\u7d22\u4e1c\u897f\u603b\u4f1a\u975e\u5e38\u5feb\u5f97\u641c\u7d22\u51fa\u7ed3\u679c\uff0c\u800c\u4e14\u8fd8\u5341\u5206\u51c6\u786e\u3002\u800c\u4ed6\u4eec\u5c31\u662f\u8fd0\u7528\u4e86Trie\u5b9e\u73b0\u7684\u3002 Trie\u601d\u60f3 \u00b6 \u6211\u4eec\u53d1\u73b0\uff0c\u201c\u6d1b\u201d\u3001\u201c\u6d1b\u8c37\u201d\u3001\u201c\u6d1b\u8c37\u5f3a\u201d\u90fd\u6709\u5171\u540c\u7684\u524d\u7f00\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u5c06\u524d\u7f00\u201c\u6d1b\u201d\u5b58\u50a8\u6210\u4e00\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u5c31\u53d8\u6210\u201c\u8c37\u201d\uff0c\u201c\u8c37\u5f3a\u201d\uff0c\u7136\u540e\u518d\u5c06\u201c\u8c37\u201d\u5b58\u4e00\u4e2a\uff0c\u5982\u6b64\u5f80\u590d\u3002\u5982\u56fe\uff1a \u4f46\u662f\u5982\u679c\u662f\uff1a\u201c\u6d1b\u201d\uff0c\u201c\u6d1b\u8c37\u201d\uff0c\u201c\u6d1b\u795e\u8d4b\u201d\u7684\u60c5\u51b5\uff0c\u5f88\u660e\u663e\u5c31\u4e0d\u80fd\u7528\u94fe\u6765\u5b58\u50a8\uff0c\u4e8e\u662f\u5c31\u60f3\u5230\u4e86\u7528\u4e00\u4e2a\u6811\u6765\u5b58\uff0c\u50cf\u8fd9\u6837\uff1a \u4e8e\u662f\uff0c\u6bcf\u4e2a\u91cd\u590d\u7684\u5b57\u6bcd\u90fd\u4e0d\u4f1a\u88ab\u91cd\u590d\u5b58\u50a8\u3002 \u6a21\u677f\u4ee3\u7801 \u00b6 \u6a21\u677f\u4ee3\u7801 #include <bits/stdc++.h> using namespace std ; const int N = 1e5 + 5 ; int n , m , tot ; string s ; int node [ N * 5 ][ 26 ]; bool exist [ N * 5 * 26 ]; void insert ( string s ) { int len = s . size (); int now = 1 ; for ( int i = 0 ; i < len ; ++ i ) { int k = s [ i ] - 'a' ; // \u5f53\u524d\u5b57\u6bcd if ( node [ now ][ k ] == 0 ) node [ now ][ k ] = ++ tot ; //\u5982\u679c\u6b64\u65f6\u6ca1\u6709\u8282\u70b9\uff0c\u5c31\u65b0\u5efa\u8282\u70b9 now = node [ now ][ k ]; } exist [ now ] = true ; //\u6807\u8bb0\uff0c\u8868\u793a\u6b64\u65f6\u7684now\u5bf9\u5e94\u6709\u7ed3\u679c return ; } bool search ( string s ) { int len = s . size (); int now = 1 ; for ( int i = 0 ; i < len ; ++ i ) { int k = s [ i ] - 'a' ; if ( node [ now ][ k ] == 0 ) return false ; //\u5982\u679c\u6b64\u65f6\u6ca1\u6709\u7ed3\u679c\uff0c\u5219\u76f4\u63a5\u8fd4\u56defalse now = node [ now ][ k ]; } return exist [ now ]; //\u8fd9\u91cc\u7684exist\u610f\u4e49\u548c\u4e0a\u9762\u7684\u4e00\u6837\uff0c\u8868\u793a\u6b64\u65f6\u7684now\u6709\u6ca1\u6709\u7ed3\u679c } int main () { cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) { cin >> s ; insert ( s ); } cin >> m ; for ( int i = 1 ; i <= m ; ++ i ) { cin >> s ; puts ( search ( s ) == true ? \"Yes\" : \"No\" ); } return 0 ; } \u4ee3\u7801\u6ce8\u610f\u70b9\uff1a Trie\u6570\u7ec4\u7a7a\u95f4\u8981\u5f00\u5230 \\(\\text{\u5b57\u7b26\u4e32\u4e2a\u6570}\\times \\text{\u4e0d\u540c\u7684\u5b57\u7b26\u4e2a\u6570}\\) \u3002 \u4ee3\u7801\u4e2d\u7684 tot \u548c now \u7684\u521d\u59cb\u503c\u5fc5\u987b\u76f8\u540c\uff0c\u4f8b\u5982\uff1a\u6211\u4eec\u5b9a\u4e49 tot \u521d\u59cb\u4e3a 0 \uff0c\u90a3\u4e48 now \u521d\u59cb\u4e5f\u5f97\u4e3a0\u3002 \u4f8b\u9898 \u00b6 P2580 \u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86 Trie\u677f\u5b50\u9898\uff0c\u63d2\u5165\u5220\u9664\u6ca1\u5565\u53d8\u5316\uff0c\u53ea\u7528\u628a exist \u6570\u7ec4\u5b9a\u4e3a int \u7c7b\u578b\uff0c\u63d2\u5165\u65f6\u5c06 exist[now]++ \uff0c\u4e3a\u4e86\u8282\u7701\u7a7a\u95f4\uff0c\u6211\u4eec\u8be2\u95ee\u65f6\u5982\u679c\u51fa\u73b0 OK \u624d\u63d2\u5165\u3002 P2580 \u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86 \u4ee3\u7801 #include <bits/stdc++.h> using namespace std ; const int N = 1e5 + 5 ; int n , m , tot ; string s ; int node [ N * 5 ][ 26 ]; int exist [ N * 5 * 26 ]; void insert ( string s ) { int len = s . size (); int now = 1 ; for ( int i = 0 ; i < len ; ++ i ) { int k = s [ i ] - 'a' ; if ( node [ now ][ k ] == 0 ) node [ now ][ k ] = ++ tot ; now = node [ now ][ k ]; } exist [ now ] ++ ; return ; } string search ( string s ) { int len = s . size (); int now = 1 ; for ( int i = 0 ; i < len ; ++ i ) { int k = s [ i ] - 'a' ; if ( node [ now ][ k ] == 0 ) return \"WRONG\" ; now = node [ now ][ k ]; } if ( exist [ now ] == 0 ) return \"WRONG\" ; else if ( exist [ now ] == 1 ) return \"OK\" ; else return \"REPEAT\" ; } int main () { cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) { cin >> s ; insert ( s ); } cin >> m ; for ( int i = 1 ; i <= m ; ++ i ) { cin >> s ; string res = search ( s ); cout << res << endl ; if ( res == \"OK\" ) insert ( s ); } return 0 ; } P3879 [TJOI2010]\u9605\u8bfb\u7406\u89e3 Trie\u7684\u6a21\u677f\u6539\u4e86\u4e00\u4e0b\uff0c exist \u6570\u7ec4\u4ece\u4e8c\u7ef4\u589e\u5230\u4e86\u4e09\u7ef4\uff0c\u589e\u52a0\u7684\u90a3\u4e00\u7ef4\u5ea6\u5c31\u662f\u6587\u7ae0\u53f7\uff0c\u5176\u4f59\u7684\u5747\u4e00\u6837\u3002\u4f46\u8fd9\u9898 #11 \u6570\u636e\u70b9MLE\uff0c\u8fd9\u4e5f\u662f\u6ca1\u529e\u6cd5\u3002 P3879 [TJOI2010]\u9605\u8bfb\u7406\u89e3 \u4ee3\u7801 #include <bits/stdc++.h> using namespace std ; const int N = 5e3 + 5 ; int n , m , L , tot ; string s ; int res [ N ], node [ 1005 ][ N ][ 26 ]; bool exist [ 1005 ][ N * 26 ]; void insert ( int Case , string s ) { int len = s . size (); int now = 0 ; for ( int i = 0 ; i < len ; ++ i ) { int k = s [ i ] - 'a' ; if ( node [ Case ][ now ][ k ] == 0 ) node [ Case ][ now ][ k ] = ++ tot ; now = node [ Case ][ now ][ k ]; } exist [ Case ][ now ] = true ; } bool search ( int Case , string s ) { int len = s . size (); int now = 0 ; for ( int i = 0 ; i < len ; ++ i ) { int k = s [ i ] - 'a' ; if ( node [ Case ][ now ][ k ] == 0 ) return false ; now = node [ Case ][ now ][ k ]; } return exist [ Case ][ now ]; } int main () { cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) { cin >> L ; for ( int j = 1 ; j <= L ; ++ j ) { cin >> s ; insert ( i , s ); } } cin >> m ; for ( int i = 1 ; i <= m ; ++ i ) { cin >> s ; int cnt = 0 ; for ( int j = 1 ; j <= n ; ++ j ) { if ( search ( j , s ) == true ) res [ ++ cnt ] = j ; } for ( int j = 1 ; j <= cnt ; ++ j ) { if ( j != 1 ) printf ( \" \" ); printf ( \"%d\" , res [ j ]); } cout << endl ; } return 0 ; } 01 Trie \u00b6 \u5f15\u5165 \u00b6 \u6211\u4eec\u5982\u679c\u8981\u7ed9\u5b9a\u4e24\u4e2a\u6570\u7ec4 a \u548c b \uff0c\u5747\u6709 \\(n\\) \u4e2a\u6570\uff0c\u6211\u4eec\u56fa\u5b9a a \u4e0d\u52a8\uff0c\u8ba9 b \u81ea\u7531\u6392\u5217\uff0c\u4f7f\u6392\u5217\u540e\u7684 b[i] xor a[i] \u7684\u503c\u6700\u5927\uff0c\u6c42\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u7b54\u6848\u3002 \u65b9\u6cd5\u4e00 \u00b6 \u66b4\u529b\u679a\u4e3e b \u7684\u6392\u5217\uff0c\u53d6\u6700\u5927\u503c\u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n!\\times n)\\) \uff0c\u968f\u4fbf\u5c31\u5361\u6b7b\u4e86\u3002 \u65b9\u6cd5\u4e8c - 01 Trie \u00b6 \u672c\u8d28\u4e0a\u662f\u4e00\u79cd\u8d2a\u5fc3\u3002\u6211\u4eec\u53d1\u73b0\uff1a \u4e8c\u8fdb\u5236\u9ad8\u4f4d\u5c3d\u91cf\u4e0d\u540c\uff0c\u5f02\u6216\u51fa\u7684\u503c\u5c31\u4f1a\u8d8a\u5927\u3002 \u6709\u4e86\u8fd9\u4e2a\u6027\u8d28\uff0c\u5c31\u53d1\u73b0\u6211\u4eec\u5904\u7406\u4e8c\u8fdb\u5236\u4f4d\u5c31\u884c\u4e86\u3002\u53d1\u73b0\uff0c\u6b64\u65f6\u53ea\u8981\u6c42\u4e8c\u8fdb\u5236\u9ad8\u4f4d\u5f00\u59cb\u7684\u7b2c \\(i\\) \u4f4d\u6709\u76f8\u540c\u7684\u6216\u8005\u662f\u6ca1\u76f8\u540c\u7684\u5373\u53ef\u3002\u4e8e\u662f\uff0c\u4fbf\u53d1\u73b0\u53ef\u4ee5\u7528Trie\u6765\u7ef4\u62a4\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a \\(O(n\\log \\max(a_i,b_i))\\) \uff0c\u5728 int \u8303\u56f4\u5185\uff0c\u5373\u53ef\u7406\u89e3\u4e3a \\(O(n\\log n)\\) \uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u6781\u5176\u4f18\u79c0\uff0c\u7a7a\u95f4\u4e5f\u5c31 \\(O(2\\times n\\log n)\\) \u3002 \u4f8b\u9898 \u00b6 CF923C Perfect Security 01 Trie\u677f\u5b50\uff0c\u76f4\u63a5\u4e0a\u4ee3\u7801\uff1a CF923C Perfect Security \u4ee3\u7801 #include <bits/stdc++.h> const int N = 3e5 + 5 ; struct Trie { int count , son [ 2 ]; } Tree [ N * 35 * 2 ] ; int n , tot = 1 ; int a [ N ], b [ N ]; void insert ( int x ) { int now = 1 ; Tree [ now ]. count ++ ; for ( int i = 30 ; i >= 0 ; -- i ) { int key = x >> i & 1 ; //\u53d6x\u4ece\u53f3\u5f80\u5de6\u6570\u7b2ci\u4f4d if ( Tree [ now ]. son [ key ] == 0 ) Tree [ now ]. son [ key ] = ++ tot ; now = Tree [ now ]. son [ key ]; Tree [ now ]. count ++ ; } return ; } int search ( int x ) { int result = 0 , now = 1 ; for ( int i = 30 ; i >= 0 ; -- i ) { int key = x >> i & 1 ; if ( Tree [ Tree [ now ]. son [ key ]]. count == 0 ) key ^= 1 ; result = ( result << 1 ) + key ; now = Tree [ now ]. son [ key ]; Tree [ now ]. count -- ; } return x ^ result ; } int main () { std :: cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) { std :: cin >> a [ i ]; } for ( int i = 1 ; i <= n ; ++ i ) { std :: cin >> b [ i ]; insert ( b [ i ]); } for ( int i = 1 ; i <= n ; ++ i ) { std :: cout << search ( a [ i ]) << \" \" ; } return 0 ; } \u5f85\u66f4\u65b0ing......","title":"\u5b57\u5178\u6811"},{"location":"notes/trie/#trie","text":"Trie\u6811\uff08\u5b57\u5178\u6811\uff09\uff0c\u662f\u4e00\u79cd\u67e5\u8be2\u5feb\u901f\uff0c\u7701\u7a7a\u95f4\uff08\u76f8\u5bf9\u800c\u8a00\uff09\u7684\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u3002","title":"Trie\u6811"},{"location":"notes/trie/#_1","text":"\u4e0a \u767e\u5ea6 \u641c\u4e1c\u897f\uff0c\u6211\u4eec\u53d1\u73b0\u641c\u7d22\u201c\u6d1b\u8c37\u201d\u4f1a\u51fa\u73b0\u4e8c\u5341\u591a\u9875\u7684\u7ed3\u679c\u3002\u6211\u4eec\u77e5\u9053\uff0c\u767e\u5ea6\u662f\u4e00\u4e2a\u5341\u5206\u5f3a\u5927\u7684\u641c\u7d22\u5f15\u64ce\uff0c\u800c\u4e14\u4fe1\u606f\u91cf\u5de8\u5927\uff0c\u4f46\u6211\u4eec\u641c\u7d22\u4e1c\u897f\u603b\u4f1a\u975e\u5e38\u5feb\u5f97\u641c\u7d22\u51fa\u7ed3\u679c\uff0c\u800c\u4e14\u8fd8\u5341\u5206\u51c6\u786e\u3002\u800c\u4ed6\u4eec\u5c31\u662f\u8fd0\u7528\u4e86Trie\u5b9e\u73b0\u7684\u3002","title":"\u5f15\u5165"},{"location":"notes/trie/#trie_1","text":"\u6211\u4eec\u53d1\u73b0\uff0c\u201c\u6d1b\u201d\u3001\u201c\u6d1b\u8c37\u201d\u3001\u201c\u6d1b\u8c37\u5f3a\u201d\u90fd\u6709\u5171\u540c\u7684\u524d\u7f00\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u5c06\u524d\u7f00\u201c\u6d1b\u201d\u5b58\u50a8\u6210\u4e00\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u5c31\u53d8\u6210\u201c\u8c37\u201d\uff0c\u201c\u8c37\u5f3a\u201d\uff0c\u7136\u540e\u518d\u5c06\u201c\u8c37\u201d\u5b58\u4e00\u4e2a\uff0c\u5982\u6b64\u5f80\u590d\u3002\u5982\u56fe\uff1a \u4f46\u662f\u5982\u679c\u662f\uff1a\u201c\u6d1b\u201d\uff0c\u201c\u6d1b\u8c37\u201d\uff0c\u201c\u6d1b\u795e\u8d4b\u201d\u7684\u60c5\u51b5\uff0c\u5f88\u660e\u663e\u5c31\u4e0d\u80fd\u7528\u94fe\u6765\u5b58\u50a8\uff0c\u4e8e\u662f\u5c31\u60f3\u5230\u4e86\u7528\u4e00\u4e2a\u6811\u6765\u5b58\uff0c\u50cf\u8fd9\u6837\uff1a \u4e8e\u662f\uff0c\u6bcf\u4e2a\u91cd\u590d\u7684\u5b57\u6bcd\u90fd\u4e0d\u4f1a\u88ab\u91cd\u590d\u5b58\u50a8\u3002","title":"Trie\u601d\u60f3"},{"location":"notes/trie/#_2","text":"\u6a21\u677f\u4ee3\u7801 #include <bits/stdc++.h> using namespace std ; const int N = 1e5 + 5 ; int n , m , tot ; string s ; int node [ N * 5 ][ 26 ]; bool exist [ N * 5 * 26 ]; void insert ( string s ) { int len = s . size (); int now = 1 ; for ( int i = 0 ; i < len ; ++ i ) { int k = s [ i ] - 'a' ; // \u5f53\u524d\u5b57\u6bcd if ( node [ now ][ k ] == 0 ) node [ now ][ k ] = ++ tot ; //\u5982\u679c\u6b64\u65f6\u6ca1\u6709\u8282\u70b9\uff0c\u5c31\u65b0\u5efa\u8282\u70b9 now = node [ now ][ k ]; } exist [ now ] = true ; //\u6807\u8bb0\uff0c\u8868\u793a\u6b64\u65f6\u7684now\u5bf9\u5e94\u6709\u7ed3\u679c return ; } bool search ( string s ) { int len = s . size (); int now = 1 ; for ( int i = 0 ; i < len ; ++ i ) { int k = s [ i ] - 'a' ; if ( node [ now ][ k ] == 0 ) return false ; //\u5982\u679c\u6b64\u65f6\u6ca1\u6709\u7ed3\u679c\uff0c\u5219\u76f4\u63a5\u8fd4\u56defalse now = node [ now ][ k ]; } return exist [ now ]; //\u8fd9\u91cc\u7684exist\u610f\u4e49\u548c\u4e0a\u9762\u7684\u4e00\u6837\uff0c\u8868\u793a\u6b64\u65f6\u7684now\u6709\u6ca1\u6709\u7ed3\u679c } int main () { cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) { cin >> s ; insert ( s ); } cin >> m ; for ( int i = 1 ; i <= m ; ++ i ) { cin >> s ; puts ( search ( s ) == true ? \"Yes\" : \"No\" ); } return 0 ; } \u4ee3\u7801\u6ce8\u610f\u70b9\uff1a Trie\u6570\u7ec4\u7a7a\u95f4\u8981\u5f00\u5230 \\(\\text{\u5b57\u7b26\u4e32\u4e2a\u6570}\\times \\text{\u4e0d\u540c\u7684\u5b57\u7b26\u4e2a\u6570}\\) \u3002 \u4ee3\u7801\u4e2d\u7684 tot \u548c now \u7684\u521d\u59cb\u503c\u5fc5\u987b\u76f8\u540c\uff0c\u4f8b\u5982\uff1a\u6211\u4eec\u5b9a\u4e49 tot \u521d\u59cb\u4e3a 0 \uff0c\u90a3\u4e48 now \u521d\u59cb\u4e5f\u5f97\u4e3a0\u3002","title":"\u6a21\u677f\u4ee3\u7801"},{"location":"notes/trie/#_3","text":"P2580 \u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86 Trie\u677f\u5b50\u9898\uff0c\u63d2\u5165\u5220\u9664\u6ca1\u5565\u53d8\u5316\uff0c\u53ea\u7528\u628a exist \u6570\u7ec4\u5b9a\u4e3a int \u7c7b\u578b\uff0c\u63d2\u5165\u65f6\u5c06 exist[now]++ \uff0c\u4e3a\u4e86\u8282\u7701\u7a7a\u95f4\uff0c\u6211\u4eec\u8be2\u95ee\u65f6\u5982\u679c\u51fa\u73b0 OK \u624d\u63d2\u5165\u3002 P2580 \u4e8e\u662f\u4ed6\u9519\u8bef\u7684\u70b9\u540d\u5f00\u59cb\u4e86 \u4ee3\u7801 #include <bits/stdc++.h> using namespace std ; const int N = 1e5 + 5 ; int n , m , tot ; string s ; int node [ N * 5 ][ 26 ]; int exist [ N * 5 * 26 ]; void insert ( string s ) { int len = s . size (); int now = 1 ; for ( int i = 0 ; i < len ; ++ i ) { int k = s [ i ] - 'a' ; if ( node [ now ][ k ] == 0 ) node [ now ][ k ] = ++ tot ; now = node [ now ][ k ]; } exist [ now ] ++ ; return ; } string search ( string s ) { int len = s . size (); int now = 1 ; for ( int i = 0 ; i < len ; ++ i ) { int k = s [ i ] - 'a' ; if ( node [ now ][ k ] == 0 ) return \"WRONG\" ; now = node [ now ][ k ]; } if ( exist [ now ] == 0 ) return \"WRONG\" ; else if ( exist [ now ] == 1 ) return \"OK\" ; else return \"REPEAT\" ; } int main () { cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) { cin >> s ; insert ( s ); } cin >> m ; for ( int i = 1 ; i <= m ; ++ i ) { cin >> s ; string res = search ( s ); cout << res << endl ; if ( res == \"OK\" ) insert ( s ); } return 0 ; } P3879 [TJOI2010]\u9605\u8bfb\u7406\u89e3 Trie\u7684\u6a21\u677f\u6539\u4e86\u4e00\u4e0b\uff0c exist \u6570\u7ec4\u4ece\u4e8c\u7ef4\u589e\u5230\u4e86\u4e09\u7ef4\uff0c\u589e\u52a0\u7684\u90a3\u4e00\u7ef4\u5ea6\u5c31\u662f\u6587\u7ae0\u53f7\uff0c\u5176\u4f59\u7684\u5747\u4e00\u6837\u3002\u4f46\u8fd9\u9898 #11 \u6570\u636e\u70b9MLE\uff0c\u8fd9\u4e5f\u662f\u6ca1\u529e\u6cd5\u3002 P3879 [TJOI2010]\u9605\u8bfb\u7406\u89e3 \u4ee3\u7801 #include <bits/stdc++.h> using namespace std ; const int N = 5e3 + 5 ; int n , m , L , tot ; string s ; int res [ N ], node [ 1005 ][ N ][ 26 ]; bool exist [ 1005 ][ N * 26 ]; void insert ( int Case , string s ) { int len = s . size (); int now = 0 ; for ( int i = 0 ; i < len ; ++ i ) { int k = s [ i ] - 'a' ; if ( node [ Case ][ now ][ k ] == 0 ) node [ Case ][ now ][ k ] = ++ tot ; now = node [ Case ][ now ][ k ]; } exist [ Case ][ now ] = true ; } bool search ( int Case , string s ) { int len = s . size (); int now = 0 ; for ( int i = 0 ; i < len ; ++ i ) { int k = s [ i ] - 'a' ; if ( node [ Case ][ now ][ k ] == 0 ) return false ; now = node [ Case ][ now ][ k ]; } return exist [ Case ][ now ]; } int main () { cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) { cin >> L ; for ( int j = 1 ; j <= L ; ++ j ) { cin >> s ; insert ( i , s ); } } cin >> m ; for ( int i = 1 ; i <= m ; ++ i ) { cin >> s ; int cnt = 0 ; for ( int j = 1 ; j <= n ; ++ j ) { if ( search ( j , s ) == true ) res [ ++ cnt ] = j ; } for ( int j = 1 ; j <= cnt ; ++ j ) { if ( j != 1 ) printf ( \" \" ); printf ( \"%d\" , res [ j ]); } cout << endl ; } return 0 ; }","title":"\u4f8b\u9898"},{"location":"notes/trie/#01-trie","text":"","title":"01 Trie"},{"location":"notes/trie/#_4","text":"\u6211\u4eec\u5982\u679c\u8981\u7ed9\u5b9a\u4e24\u4e2a\u6570\u7ec4 a \u548c b \uff0c\u5747\u6709 \\(n\\) \u4e2a\u6570\uff0c\u6211\u4eec\u56fa\u5b9a a \u4e0d\u52a8\uff0c\u8ba9 b \u81ea\u7531\u6392\u5217\uff0c\u4f7f\u6392\u5217\u540e\u7684 b[i] xor a[i] \u7684\u503c\u6700\u5927\uff0c\u6c42\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u7b54\u6848\u3002","title":"\u5f15\u5165"},{"location":"notes/trie/#_5","text":"\u66b4\u529b\u679a\u4e3e b \u7684\u6392\u5217\uff0c\u53d6\u6700\u5927\u503c\u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n!\\times n)\\) \uff0c\u968f\u4fbf\u5c31\u5361\u6b7b\u4e86\u3002","title":"\u65b9\u6cd5\u4e00"},{"location":"notes/trie/#-01-trie","text":"\u672c\u8d28\u4e0a\u662f\u4e00\u79cd\u8d2a\u5fc3\u3002\u6211\u4eec\u53d1\u73b0\uff1a \u4e8c\u8fdb\u5236\u9ad8\u4f4d\u5c3d\u91cf\u4e0d\u540c\uff0c\u5f02\u6216\u51fa\u7684\u503c\u5c31\u4f1a\u8d8a\u5927\u3002 \u6709\u4e86\u8fd9\u4e2a\u6027\u8d28\uff0c\u5c31\u53d1\u73b0\u6211\u4eec\u5904\u7406\u4e8c\u8fdb\u5236\u4f4d\u5c31\u884c\u4e86\u3002\u53d1\u73b0\uff0c\u6b64\u65f6\u53ea\u8981\u6c42\u4e8c\u8fdb\u5236\u9ad8\u4f4d\u5f00\u59cb\u7684\u7b2c \\(i\\) \u4f4d\u6709\u76f8\u540c\u7684\u6216\u8005\u662f\u6ca1\u76f8\u540c\u7684\u5373\u53ef\u3002\u4e8e\u662f\uff0c\u4fbf\u53d1\u73b0\u53ef\u4ee5\u7528Trie\u6765\u7ef4\u62a4\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a \\(O(n\\log \\max(a_i,b_i))\\) \uff0c\u5728 int \u8303\u56f4\u5185\uff0c\u5373\u53ef\u7406\u89e3\u4e3a \\(O(n\\log n)\\) \uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u6781\u5176\u4f18\u79c0\uff0c\u7a7a\u95f4\u4e5f\u5c31 \\(O(2\\times n\\log n)\\) \u3002","title":"\u65b9\u6cd5\u4e8c - 01 Trie"},{"location":"notes/trie/#_6","text":"CF923C Perfect Security 01 Trie\u677f\u5b50\uff0c\u76f4\u63a5\u4e0a\u4ee3\u7801\uff1a CF923C Perfect Security \u4ee3\u7801 #include <bits/stdc++.h> const int N = 3e5 + 5 ; struct Trie { int count , son [ 2 ]; } Tree [ N * 35 * 2 ] ; int n , tot = 1 ; int a [ N ], b [ N ]; void insert ( int x ) { int now = 1 ; Tree [ now ]. count ++ ; for ( int i = 30 ; i >= 0 ; -- i ) { int key = x >> i & 1 ; //\u53d6x\u4ece\u53f3\u5f80\u5de6\u6570\u7b2ci\u4f4d if ( Tree [ now ]. son [ key ] == 0 ) Tree [ now ]. son [ key ] = ++ tot ; now = Tree [ now ]. son [ key ]; Tree [ now ]. count ++ ; } return ; } int search ( int x ) { int result = 0 , now = 1 ; for ( int i = 30 ; i >= 0 ; -- i ) { int key = x >> i & 1 ; if ( Tree [ Tree [ now ]. son [ key ]]. count == 0 ) key ^= 1 ; result = ( result << 1 ) + key ; now = Tree [ now ]. son [ key ]; Tree [ now ]. count -- ; } return x ^ result ; } int main () { std :: cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) { std :: cin >> a [ i ]; } for ( int i = 1 ; i <= n ; ++ i ) { std :: cin >> b [ i ]; insert ( b [ i ]); } for ( int i = 1 ; i <= n ; ++ i ) { std :: cout << search ( a [ i ]) << \" \" ; } return 0 ; } \u5f85\u66f4\u65b0ing......","title":"\u4f8b\u9898"}]}